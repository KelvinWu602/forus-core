package helpers

import (
	"crypto/aes"
	"encoding/hex"
	"math/rand"
	"time"
)

const charSet = "abcdefghijklmnopqrstuvwxyz" + "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

// create a seeded Random number of type Rand
var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))

// "crypto/rsa"
// "crypto/rand"

// ECC: notion read.me

// Public Key Private Key Generation using rsa package
// 1) Generate a private key with PrivateKey by rsa.GenerateKey(rand.Reader, RANDOM_SIZE)
// 2) The public key is generated at the same time in (1) via rsa.PrivateKey.PublicKey

// Symmetry Key Generation using aes package and random package
// 1) a secret key is needed for AES, which is generated by generateSecretKey()

type SecretKey []byte

func generateSecretKey(length int, charset string) SecretKey {
	b := make([]byte, length)
	for i := range b {
		b[i] = charset[seededRand.Intn(len(charset))]
	}
	return b
}

func encryptAES(key SecretKey, plaintext string) (string, error) {
	cipher, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	output := make(SecretKey, len(plaintext))
	cipher.Encrypt(output, []byte(plaintext))
	return hex.EncodeToString(output), nil

}

func decryptAES(key SecretKey, ct string) (string, error) {
	ciphertext, _ := hex.DecodeString(ct)

	cipher, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}
	output := make(SecretKey, len(ciphertext))
	cipher.Decrypt(output, ciphertext)
	return string(output[:]), nil

}

type KeyExchange struct {
}
